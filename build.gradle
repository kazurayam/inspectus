plugins {
    id 'java-library'
    id 'jacoco'
    id 'maven-publish'
    id 'signing'
}

group = "com.kazurayam"
version = "0.7.5"

ext {
    isReleaseVersion = !version.endsWith("SNAPSHOT")
}

repositories {
    mavenCentral()
    maven {
        url = uri("https://maven.pkg.github.com/kazurayam/materialstore")
        credentials {
            username = project.findProperty("gpr.user")
            password = project.findProperty("gpr.key")
        }
    }
    mavenLocal()
}

sourceCompatibility = "1.8"
targetCompatibility = "1.8"
def defaultEncoding = "UTF-8"
tasks.withType(AbstractCompile).each { it.options.encoding = defaultEncoding }
tasks.withType(GroovyCompile).each { it.groovyOptions.encoding = defaultEncoding }
tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

dependencies {
    api libs.materialstore
    implementation libs.ashot
    implementation libs.commons.csv
    implementation libs.httpclient
    implementation libs.jsoup
    implementation libs.poi
    implementation libs.selenium4
    implementation libs.slf4j.api
    testImplementation libs.slf4j.simple
    testImplementation libs.commons.io
    testImplementation libs.junit.jupiter.api
    testImplementation libs.webdrivermanager
    testRuntimeOnly libs.junit.jupiter.engine
    testRuntimeOnly libs.log4j.core
}

java {
    withJavadocJar()
    withSourcesJar()
}

tasks.withType(Test) {
    useJUnitPlatform()
}

test {
    exclude '**/selenium/*'
    finalizedBy(jacocoTestReport)
}

// https://stackoverflow.com/questions/56796676/gradle-how-to-run-a-custom-task-with-a-custom-configuration
task testWithSelenium3(type: Test, dependsOn: compileTestJava) {
    dependencies {
        testImplementation libs.selenium3
    }
    include '**/selenium/*'
}

task testWithSelenium4(type: Test, dependsOn: compileTestJava) {
    dependencies {
        testImplementation libs.selenium4
    }
    include '**/selenium/*'
}

task testSelenium(dependsOn: [testWithSelenium3, testWithSelenium4])

javadoc {
    options.showFromProtected()
    failOnError = false
    options.locale = "en_US"
}

task aggregateDocsImages, {
    copy({
        from("freemarker/docs/images")
        into("docs/images")
    })
}

task copyJavadocToDocsDir(type: Copy) {
    from "build/docs/javadoc"
    into "docs/api"
}
javadoc.finalizedBy copyJavadocToDocsDir

publishing {
    publications {
        inspectus(MavenPublication) {
            from components.java
            pom {
                groupId = project.group
                name = project.rootProject.name
                description = "Introduces the materialstore library so that you can easily build automated WebUI tests"
                url = "https://kazurayam.github.io/inspectus/"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "https://www.apache.org.licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = "kazurayam"
                        name = "URAYAMA,kazuaki"
                        email = "kazuaki.urayama@gmail.com"
                    }
                }
                scm {
                    connection = "scm:git:https://github.com/kazurayam/${project.rootProject.name}.git"
                    developerConnection = "scm:git:git@github.com:kazurayam/${project.rootProject.name}.git"
                    url = "https://github.com/kazurayam/${project.rootProject.name}"
                }
            }
        }
    }
    repositories {
        maven {
            def releaseRepo = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotRepo = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = isReleaseVersion ? releaseRepo: snapshotRepo
            credentials {
                username = project.hasProperty("ossrhUsername") ? ossrhUsername : "Unknown user"
                password = project.hasProperty("ossrhPassword") ? ossrhPassword : "Unknown password"
            }
        }
        maven {
            name = "gpr"
            url = uri("https://maven.pkg.github.com/kazurayam/inspectus")
            credentials {
                username = project.findProperty("gpr.user")
                password = project.findProperty("gpr.key")
            }
        }
    }
}

signing {
    sign publishing.publications.inspectus
}

// I do not want to sign the SNAPSHOT
tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
}